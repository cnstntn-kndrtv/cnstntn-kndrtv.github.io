<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru-RU"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://cnstntn-kndrtv.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cnstntn-kndrtv.github.io/" rel="alternate" type="text/html" hreflang="ru-RU" /><updated>2022-05-04T10:15:58+03:00</updated><id>https://cnstntn-kndrtv.github.io/feed.xml</id><title type="html">cnstntn.kndrtv</title><subtitle>Some thoughts and projects.</subtitle><entry><title type="html">Анализатор частей речи казахского языка</title><link href="https://cnstntn-kndrtv.github.io/posts/kazakh-pos/" rel="alternate" type="text/html" title="Анализатор частей речи казахского языка" /><published>2022-04-08T14:00:00+03:00</published><updated>2022-04-08T17:58:45+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/kazakh-pos</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/kazakh-pos/">&lt;p&gt;В рамках одного маленького проекта написал приложение для анализа частей речи казахского языка (POS).&lt;br /&gt;
Окно приложения выглядит так:&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/kazakh_pos.png&quot; alt=&quot;Казахский части речи&quot; /&gt;&lt;br /&gt;
Указываем путь к папке, выбираем один из файлов (pdf, docx, txt).&lt;br /&gt;
Ниже можно указать, какие подстроки удалить (знаки переноса строки например, или даже целые слова).&lt;br /&gt;
И следующие 2 окна - предпросмотр “сырого” текста и результаты анализа в CSV-табличке.&lt;br /&gt;
Исходники тут - &lt;a href=&quot;https://github.com/cnstntn-kndrtv/kazakh_pos&quot;&gt;https://github.com/cnstntn-kndrtv/kazakh_pos&lt;/a&gt;.&lt;br /&gt;
в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./dist/&lt;/code&gt; лежит архив собранного приложения для Windows (то еще удовольствие, кстати, собирать десктопные приложения для Python на Windows).&lt;/p&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="NLP" /><category term="soft" /><category term="utils" /><summary type="html">В рамках одного маленького проекта написал приложение для анализа частей речи казахского языка (POS). Окно приложения выглядит так: Указываем путь к папке, выбираем один из файлов (pdf, docx, txt). Ниже можно указать, какие подстроки удалить (знаки переноса строки например, или даже целые слова). И следующие 2 окна - предпросмотр “сырого” текста и результаты анализа в CSV-табличке. Исходники тут - https://github.com/cnstntn-kndrtv/kazakh_pos. в ./dist/ лежит архив собранного приложения для Windows (то еще удовольствие, кстати, собирать десктопные приложения для Python на Windows).</summary></entry><entry><title type="html">Еще одно видео о работе АрхиГраф.Логос.</title><link href="https://cnstntn-kndrtv.github.io/posts/logos-video-2/" rel="alternate" type="text/html" title="Еще одно видео о работе АрхиГраф.Логос." /><published>2022-03-29T14:00:00+03:00</published><updated>2022-03-29T15:28:36+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/logos-video-2</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/logos-video-2/">&lt;p&gt;Запись моей презенташки для &lt;a href=&quot;https://t.me/sberlogawithgraphs&quot;&gt;Sberloga in Graphs&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uQF3Vo5gEbU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="АрхиГраф.Логос" /><category term="RDF" /><category term="NLU" /><category term="NER" /><category term="велосипед" /><summary type="html">Запись моей презенташки для Sberloga in Graphs.</summary></entry><entry><title type="html">Анализ результатов диагностики</title><link href="https://cnstntn-kndrtv.github.io/posts/diagnost-result/" rel="alternate" type="text/html" title="Анализ результатов диагностики" /><published>2022-03-25T08:00:00+03:00</published><updated>2022-03-25T12:21:20+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/diagnost-result</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/diagnost-result/">&lt;p&gt;В качестве одного из примеров работы Архиграф.ЛОГОС и библиотки Ridley, разберу процесс диагностики оборудования. На примере гипотетического поезда.&lt;br /&gt;
Представим картину - поезд останавливается на станции, мимо каждого вагона проходит сотрудник (диагност) и высокотехнологичным молотком стучит по узлам и агрегатам, выявляя неисправности (недавно путешествовал и видел этот процесс).&lt;br /&gt;
В качестве итога сотруднику нужно сдать отчет о проведенной диагностике.&lt;br /&gt;
Допустим, этот отчет он пишет в произвольной форме, на естественном языке - простом, бытовом, сдобренном профессиональными терминами.&lt;br /&gt;
Поставим задачу автоматического анализа текста отчета. Опишем концептуальную модель.&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/train_onto.png&quot; alt=&quot;train_onto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Проще говоря, здесь описано только что могут быть поезда, которые следуют по маршруту, у поездов есть вагоны и так далее. Эта концептуальная схема может быть наполнена экземплярами классов (Individual в терминах OWL) - так мы добавим конкретный поезд, конкретный вагон, свяжем его соответствующим схеме ребром (предикатом) с конкретным поездом.&lt;br /&gt;
Конечно на практике всё может быть сложнее - больше вершин и ребер в графе. В схему можно включить больше доменов - информацию об остановках, добавить сотрудников с зонами ответственности, пассажиров… Надеюсь, смысл вам ясен. Иногда графовые базы сравнивают с SQL-табликами, в которых всё всегда связано (не нужно делать много хитрых join).&lt;br /&gt;
Переходим к анализу отчета диагноста. Представим такой текст: “Осмотрен поезд №ХХХ, в вагоне №1 найдена неисправность на узле А. Сломана деталь Б - треснул подшипник.”. Конечно у меня нет реального отчета, это только мои домыслы.&lt;br /&gt;
Не буду вдаваться в детали, но из этого текста можно собрать подграф нашего графа знаний. О том, как это делается, можно почитать в других статьях этого блога.&lt;br /&gt;
Если у нас нет онтологии и мы применим к этому тексту какой-то простой подход - выделим именованные сущности, обучим несколько классификаторов выдавать тип сообщения (например применим подход с intent, как в чат-ботах), или подход с slot filling - мы можем получить неплохой результат.&lt;br /&gt;
Но что, если мы захотим изменить схему? Перестроить связи, добавить новые узлы? Или захотим анализировать отчеты о проданных товарах и услугах (чай в подстаканнике, чистую наволочку), информацию о вынужденных остановках, о смене вагонов на станциях? Будем писать классификаторы для NERов и Интентов? Собирать и размечать датасеты? Схема может усложняться бесконечно. В какой-то момент станет понятно, что такой простой подход может решать только узкие задачи, а расширение его будет обходиться всё дороже.&lt;br /&gt;
Собственно по этой причине и разработан Архиграф.ЛОГОС и библиотека Ridley.&lt;/p&gt;

&lt;p&gt;P.S.&lt;br /&gt;
Еще немного размышлений на тему семантики. Смысловые отношения между сущностями в дистрибутивных семантических нейросетевых моделях (те что выдают вектора эмбеддингов) представлены отношениями (расстоянием) векторов в семантическом пространстве. То что происходит в черной коробке нейронки - чаще всего тайна. Если вы экспериментировали с такими моделями, то знаете что результаты могут быть неожиданными. Если нас интересует анализ смысла слов, именно смысла высказываний, того в какие отношения вступают сущности в тексте, нам нужна еще и понятная структура диалога/смысла текста. Чтобы внести эту структуру в нейронку, поверх можно добавить еще один архитектурный слой - программный, где кодом описывают как интерпретировать результаты. Или обучить, например, seq2seq модель и еще раз столкнуться с последствиями вероятностной природы нейронок и зависимостью от датасетов. Архиграф.ЛОГОС решает несколько задач - объяснимость модели и принятых решений, гибкость в изменении модели предметной области и скорость изменений - в этом подходе просто не нужны долгие процессы разметки датасетов и обучения нейросетей (хоть они там и есть, даже целых 3 штуки).&lt;/p&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="АрхиГраф.Логос" /><category term="RDF" /><category term="NLU" /><category term="NER" /><category term="велосипед" /><summary type="html">В качестве одного из примеров работы Архиграф.ЛОГОС и библиотки Ridley, разберу процесс диагностики оборудования. На примере гипотетического поезда. Представим картину - поезд останавливается на станции, мимо каждого вагона проходит сотрудник (диагност) и высокотехнологичным молотком стучит по узлам и агрегатам, выявляя неисправности (недавно путешествовал и видел этот процесс). В качестве итога сотруднику нужно сдать отчет о проведенной диагностике. Допустим, этот отчет он пишет в произвольной форме, на естественном языке - простом, бытовом, сдобренном профессиональными терминами. Поставим задачу автоматического анализа текста отчета. Опишем концептуальную модель.</summary></entry><entry><title type="html">Видео с конференции SmartGoPro</title><link href="https://cnstntn-kndrtv.github.io/posts/logos-video-1/" rel="alternate" type="text/html" title="Видео с конференции SmartGoPro" /><published>2022-03-22T14:00:00+03:00</published><updated>2022-03-22T14:20:29+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/logos-video-1</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/logos-video-1/">&lt;p&gt;Выкладываю запись с конференции SmartGoPro, прошедшей в сентябре прошлого года.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9t9Q6b__Fzk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;&gt;&lt;/iframe&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="АрхиГраф.Логос" /><category term="RDF" /><category term="NLU" /><category term="NER" /><category term="велосипед" /><summary type="html">Выкладываю запись с конференции SmartGoPro, прошедшей в сентябре прошлого года.</summary></entry><entry><title type="html">Разбираем смысл текста `Косил косой косой косой`</title><link href="https://cnstntn-kndrtv.github.io/posts/kosoy-kosoy/" rel="alternate" type="text/html" title="Разбираем смысл текста `Косил косой косой косой`" /><published>2022-03-22T14:00:00+03:00</published><updated>2022-03-23T08:10:51+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/kosoy-kosoy</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/kosoy-kosoy/">&lt;p&gt;Для демонстрационных целей решили шуточную задачку - анализ текста “Косил косой косой косой” средствами Архиграф.ЛОГОС.&lt;br /&gt;
Получен результат:&lt;br /&gt;
&lt;img src=&quot;/assets/img/posts/kosoy_result.png&quot; alt=&quot;Косил косой косойкосой&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На изображении представлен результат анализа текста (это скриншот визуального дебаггера, который позволяет заглянуть в процесс анализа текста).&lt;br /&gt;
Верхняя нода - сам текст, далее идут токены текста и последним слоем - выделенные упоминания сущностей и предикаты между ними.&lt;br /&gt;
В итоге мы получаем следующий RDF граф (представленный вершинами и ребрами последнего слоя на изображении):&lt;/p&gt;

&lt;div class=&quot;language-turtle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;@prefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&amp;lt;http://demo.trinidata.ru/&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;@prefix&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&amp;lt;http://www.w3.org/2000/01/rdf-schema#&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ФизическоеЛицо&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;совершаетДействие&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Покос&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;имеетОсобенностьРазвития&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Косоглазие&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Покос&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subClassOf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;СельскохозяйственныеРаботы&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;инструментДействия&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Коса&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Коса&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subClassOf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Инструмент&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;имеетФорму&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Косая&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Иначе говоря, у нас есть некий Человек с Косоглазием, который совершает действие Покос с применением инструмента Коса, котрая имеетФорму Косая.&lt;/p&gt;

&lt;p&gt;О том, как работает Архграф.ЛОГОС и библиотека Ridley, лежащая в его основе, вы можете прочитать в других статьях этого блога.&lt;/p&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="АрхиГраф.Логос" /><category term="RDF" /><category term="NLU" /><category term="NER" /><category term="велосипед" /><summary type="html">Для демонстрационных целей решили шуточную задачку - анализ текста “Косил косой косой косой” средствами Архиграф.ЛОГОС. Получен результат:</summary></entry><entry><title type="html">Обновление расширения для PopClip.</title><link href="https://cnstntn-kndrtv.github.io/posts/cyr-lat-switcher-update/" rel="alternate" type="text/html" title="Обновление расширения для PopClip." /><published>2021-11-08T09:37:00+03:00</published><updated>2021-11-08T12:12:54+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/cyr-lat-switcher-update</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/cyr-lat-switcher-update/">&lt;p&gt;Mac OS Monterey (начиная с 12 версии) больше не поставляется с PHP. Все расширения для &lt;a href=&quot;https://pilotmoon.com/popclip/&quot;&gt;PopClip&lt;/a&gt; переписываются на JavaScript. Моя поделка - не исключение.&lt;br /&gt;
Что это такое - в &lt;a href=&quot;https://cnstntn-kndrtv.github.io/posts/cyr-lat-switcher/&quot;&gt;этой статье&lt;/a&gt;.&lt;br /&gt;
Устанавливать стало проще - качаем репозиторий и ставим (простым двойным кликом) &lt;a href=&quot;https://github.com/pilotmoon/PopClip-Extensions/tree/master/source/CyrLatSwitcher.popclipext&quot;&gt;этот файлик&lt;/a&gt;.&lt;/p&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="Utils" /><category term="soft" /><category term="utils" /><summary type="html">Mac OS Monterey (начиная с 12 версии) больше не поставляется с PHP. Все расширения для PopClip переписываются на JavaScript. Моя поделка - не исключение. Что это такое - в этой статье. Устанавливать стало проще - качаем репозиторий и ставим (простым двойным кликом) этот файлик.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cnstntn-kndrtv.github.io/%7B%22src%22=%3E%22/assets/img/posts/hello_world.jpg%22,%20%22width%22=%3E1000,%20%22height%22=%3E400,%20%22alt%22=%3E%22hello%20%D1%86%D1%89%D0%BA%D0%B4%D0%B0%22%7D" /><media:content medium="image" url="https://cnstntn-kndrtv.github.io/%7B%22src%22=%3E%22/assets/img/posts/hello_world.jpg%22,%20%22width%22=%3E1000,%20%22height%22=%3E400,%20%22alt%22=%3E%22hello%20%D1%86%D1%89%D0%BA%D0%B4%D0%B0%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Конфиг Docker для Fuseki</title><link href="https://cnstntn-kndrtv.github.io/posts/docker-fuseki/" rel="alternate" type="text/html" title="Конфиг Docker для Fuseki" /><published>2021-09-20T11:37:00+03:00</published><updated>2021-09-20T12:02:33+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/docker-fuseki</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/docker-fuseki/">&lt;p&gt;Конфиг Docker для &lt;a href=&quot;https://jena.apache.org/documentation/fuseki2/&quot;&gt;Apache Jena Fuseki&lt;/a&gt;.&lt;br /&gt;
Не нашел внятного конфига для своих задачек и написал сам, может кому-то тоже пригодится.&lt;br /&gt;
Ссылка на репозиторий - &lt;a href=&quot;https://github.com/cnstntn-kndrtv/fuseki-docker-config&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Добавлено немного данных для примера.&lt;br /&gt;
Содержит простой граф:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph
    agent((Агент)) ---&amp;gt;|a| cls((owl:class))
    org((Организация)) ---&amp;gt;|subClassOf| agent
    ou((Орг. подразделение)) ---&amp;gt;|subClassOf| agent
    post((Должность)) ---&amp;gt;|a| cls
    post ---&amp;gt;|Является должностью подразделения| ou
    ou ---&amp;gt;|Является подразделением организации| org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;И немного транзитивных правил:&lt;/p&gt;
&lt;div class=&quot;language-sparql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# Если у `А` есть подкласс `Х`, а у `Х` есть подкласс `У`,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# то `У` - так же подкласс `А`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;transit_sc:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;subClassOf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;subClassOf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;subClassOf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Если `Х` имеет тип `А`, у `У` является подклассом `Х`,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# то `У` тоже имеет тип `А`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;transit_type:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;subClassOf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdf:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdf:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# ну и так далее (догадайтесь сами)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;transit_p_range:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?sc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;subClassOf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;transit_p_domain:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?sc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;subClassOf&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;rdfs:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="Utils" /><category term="Docker" /><category term="RDF" /><category term="SemanticWeb" /><category term="utils" /><summary type="html">Конфиг Docker для Apache Jena Fuseki. Не нашел внятного конфига для своих задачек и написал сам, может кому-то тоже пригодится. Ссылка на репозиторий - github Добавлено немного данных для примера. Содержит простой граф: graph agent((Агент)) ---&amp;gt;|a| cls((owl:class)) org((Организация)) ---&amp;gt;|subClassOf| agent ou((Орг. подразделение)) ---&amp;gt;|subClassOf| agent post((Должность)) ---&amp;gt;|a| cls post ---&amp;gt;|Является должностью подразделения| ou ou ---&amp;gt;|Является подразделением организации| org</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cnstntn-kndrtv.github.io/%7B%22src%22=%3E%22/assets/img/posts/docker.jpg%22,%20%22width%22=%3E400,%20%22height%22=%3E160,%20%22alt%22=%3E%22docker%22%7D" /><media:content medium="image" url="https://cnstntn-kndrtv.github.io/%7B%22src%22=%3E%22/assets/img/posts/docker.jpg%22,%20%22width%22=%3E400,%20%22height%22=%3E160,%20%22alt%22=%3E%22docker%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SoLiD и пост-платформы.</title><link href="https://cnstntn-kndrtv.github.io/posts/solid-postplatform/" rel="alternate" type="text/html" title="SoLiD и пост-платформы." /><published>2021-09-15T09:37:00+03:00</published><updated>2021-09-20T11:32:17+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/solid-postplatform</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/solid-postplatform/">&lt;p&gt;Для тех кто не знаком, &lt;a href=&quot;https://solidproject.org&quot;&gt;SoLiD&lt;/a&gt; (Social Linked Data) - логичное продолжение идей Linked Data, Semantic Web и вот этого всего от Сэра Тима Бернерса-Ли.&lt;br /&gt;
Идея простая - у вас есть какой-то личный контент, вы ставите SoLiD сервер (pod) и раздаете этот контент с ограничением прав доступа (выбранным людям/приложениям). Формат данных унифицирован (RDF) и потребителям вашего контента не нужно изучать спецификацию API (ограниченную только вашей фантазией).&lt;br /&gt;
Недавно познакомился с группой энтузиастов, которые пришли к подобной идее с другой стороны. Видео по ссылке - &lt;a href=&quot;https://youtu.be/vAwPeXv46ZY&quot;&gt;что такое Пост-Платформы и зачем они нужны?&lt;/a&gt;.&lt;br /&gt;
Разберу, что это такое и зачем это может быть нужно вам.&lt;br /&gt;
&lt;strong&gt;Физические лица и их некоммерческие интересы.&lt;/strong&gt; Допустим, у вас есть какие-то посты в соц.сетях (Facebook, Instagram и т.п.), сейчас эти публикации хранятся на серверах соц.сетей, доступ к ним разграничен средствами платформы (соц.сети в  данном случае). Уйти от одной соц.сети к другой, и перенести весь свой контент, сложно (конечно еще важна посещаемость и удобство площадки, но тут в фокусе только контент). Так же вам, возможно, сложно переносить переписку между мессенджерами, документы между облачными редакторами, плейлисты между стриминговыми (кино, музыка) сервисами, ачивки и сохранения между игровыми платформами ну и так далее. Надеюсь, идея понятна - ваши данные должны принадлежать вам, куда хотите, туда с ними и уходите.&lt;br /&gt;
&lt;strong&gt;Компании и их коммерческий интерес.&lt;/strong&gt; Допустим, вы продаете товары на маркетплейсах (Wildberries, Ozon, Яндекс.Маркет), или у вас отель и вы продаете номера через Booking. Тут ситуация такая же - есть платформа, которая диктует свои условия, берет какую-то комиссию и переход между платформами - тот еще баттхерт. Для простоты рассмотрим отель, основные продажи которого идут через агрегатора (платформу, Booking). Платформы прошли долгий сложный путь интеграции с учетными системами и стали жирным слоем между нашим маленьким отелем и потребителем. Запустить свою новую платформу сложно, долго, дорого - конкуренции почти нет. Для отеля это подразумевает игру по правилам платформы, для платформы - возможность снимать сливки и собирать максимальную комиссию. Для нас с вами (потребителей) - высокую цену, включающую комиссии платформ.&lt;br /&gt;
&lt;strong&gt;А что, если…&lt;/strong&gt; каждый такой поставщик товаров и услуг, зависящий от платформ, поставит себе SoLiD-сервер и выложит информацию о своих товарах/услугах в унифицированном (привет, Semantic Web) виде? 
&lt;strong&gt;Сейчас этот процесс выглядит так:&lt;/strong&gt;&lt;br /&gt;
Производитель контента (отель, или мы с фотками в Instagram) отдаете контент Платформе, Потребитель потребляет контент на Платформе.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
  o1((Производитель)) --&amp;gt; p1[Платформа]
  o2((Производитель)) --&amp;gt; p1
  p1 --&amp;gt; c1((Потребитель))
  p1 --&amp;gt; c2((Потребитель))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;А может выглядеть так:&lt;/strong&gt;&lt;br /&gt;
Производитель публикует контент на своем SoLiD поде, любая Платформа получает данные из Пода, а для Потребителя ничего не меняется (за исключением роста зоопарка платформ).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
  o1((Производитель)) --&amp;gt; s1([SoLiD Pod])
  s1 --&amp;gt; p1[Платформа]
  s1 --&amp;gt; p2[Платформа]

  o2((Производитель)) --&amp;gt; s2([SoLiD Pod])
  s2 --&amp;gt; p1
  s2 --&amp;gt; p2

  p1 --&amp;gt; c1((Потребитель))
  p2 --&amp;gt; c2((Потребитель))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Открытая информация позволит проще запускать платформы (хочешь стартап - делай платформу), производители увеличат количество каналов сбыта, комиссии снизятся. Производители экономят на комиссиях, потребители получают низкую цену и более специализированные площадки. Платформы теряют рынок.&lt;br /&gt;
Миллион вопросов конечно же. Посмотрим, что будет дальше.&lt;/p&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Blogging" /><category term="Thoughts" /><category term="SoLiD" /><category term="SemanticWeb" /><category term="RDF" /><summary type="html">Для тех кто не знаком, SoLiD (Social Linked Data) - логичное продолжение идей Linked Data, Semantic Web и вот этого всего от Сэра Тима Бернерса-Ли. Идея простая - у вас есть какой-то личный контент, вы ставите SoLiD сервер (pod) и раздаете этот контент с ограничением прав доступа (выбранным людям/приложениям). Формат данных унифицирован (RDF) и потребителям вашего контента не нужно изучать спецификацию API (ограниченную только вашей фантазией). Недавно познакомился с группой энтузиастов, которые пришли к подобной идее с другой стороны. Видео по ссылке - что такое Пост-Платформы и зачем они нужны?. Разберу, что это такое и зачем это может быть нужно вам. Физические лица и их некоммерческие интересы. Допустим, у вас есть какие-то посты в соц.сетях (Facebook, Instagram и т.п.), сейчас эти публикации хранятся на серверах соц.сетей, доступ к ним разграничен средствами платформы (соц.сети в данном случае). Уйти от одной соц.сети к другой, и перенести весь свой контент, сложно (конечно еще важна посещаемость и удобство площадки, но тут в фокусе только контент). Так же вам, возможно, сложно переносить переписку между мессенджерами, документы между облачными редакторами, плейлисты между стриминговыми (кино, музыка) сервисами, ачивки и сохранения между игровыми платформами ну и так далее. Надеюсь, идея понятна - ваши данные должны принадлежать вам, куда хотите, туда с ними и уходите. Компании и их коммерческий интерес. Допустим, вы продаете товары на маркетплейсах (Wildberries, Ozon, Яндекс.Маркет), или у вас отель и вы продаете номера через Booking. Тут ситуация такая же - есть платформа, которая диктует свои условия, берет какую-то комиссию и переход между платформами - тот еще баттхерт. Для простоты рассмотрим отель, основные продажи которого идут через агрегатора (платформу, Booking). Платформы прошли долгий сложный путь интеграции с учетными системами и стали жирным слоем между нашим маленьким отелем и потребителем. Запустить свою новую платформу сложно, долго, дорого - конкуренции почти нет. Для отеля это подразумевает игру по правилам платформы, для платформы - возможность снимать сливки и собирать максимальную комиссию. Для нас с вами (потребителей) - высокую цену, включающую комиссии платформ. А что, если… каждый такой поставщик товаров и услуг, зависящий от платформ, поставит себе SoLiD-сервер и выложит информацию о своих товарах/услугах в унифицированном (привет, Semantic Web) виде? Сейчас этот процесс выглядит так: Производитель контента (отель, или мы с фотками в Instagram) отдаете контент Платформе, Потребитель потребляет контент на Платформе. graph LR o1((Производитель)) --&amp;gt; p1[Платформа] o2((Производитель)) --&amp;gt; p1 p1 --&amp;gt; c1((Потребитель)) p1 --&amp;gt; c2((Потребитель))</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cnstntn-kndrtv.github.io/%7B%22src%22=%3E%22/assets/img/posts/the_wall.jpg%22,%20%22width%22=%3E400,%20%22height%22=%3E160,%20%22alt%22=%3E%22the%20wall%22%7D" /><media:content medium="image" url="https://cnstntn-kndrtv.github.io/%7B%22src%22=%3E%22/assets/img/posts/the_wall.jpg%22,%20%22width%22=%3E400,%20%22height%22=%3E160,%20%22alt%22=%3E%22the%20wall%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">NER и максимальный поток.</title><link href="https://cnstntn-kndrtv.github.io/posts/ner-and-flow/" rel="alternate" type="text/html" title="NER и максимальный поток." /><published>2021-09-08T20:27:00+03:00</published><updated>2021-09-20T17:14:21+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/ner-and-flow</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/ner-and-flow/">&lt;p&gt;Решая задачу распознавания именованных сущностей (NER) столкнулся с такой штукой - для morphologically rich (синтетических) языков свойственен почти случайный порядок слов  в предложении.&lt;br /&gt;
При этом задачу NER решают обычно на датасетах с разметкой IOB (Begin, Inner, Out), учитывающую последовательность токенов. Например в тексте “Нижний Новгород, мать его.” будут такие теги - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B-LOC, I-LOC, O, O&lt;/code&gt; ( Начало Location, продолжение Location и 2 слова без меток). Но мы, носители великого и могучего, можем запросто сказать так: “Нижний, мать его, Новгород” и модель, обученная на таком датасете, выдаст &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B-LOC, O, O, B-LOC&lt;/code&gt;. Чтобы собрать Сущность НижнийНовгород, нужно придумать еще один слой, который соберет эти 2 “начала” в одну “цепочку”.&lt;br /&gt;
Как-то так это можно представить графически:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph
    Нижний --- НижнийНовгород
    мать
    его
    Новгород --- НижнийНовгород

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;А ещё у нас могут быть какие-то другие сущности, например НижнийТагил:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph
    Нижний --- НижнийНовгород
    Нижний --- НижнийТагил
    мать
    его
    Новгород --- НижнийНовгород

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;И конечно же может случиться так что токены сущностей разбиты не только незначимыми токенами (O), но и токенами, являющимися упоминанием других сущностей. Как-то так:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph
    t1 --- e1
    t1 --- e3
    t2 --- e2
    t2 --- e3
    t3 --- e3
    t4 --- e1
    t4 --- e2
    t5 --- e2
    t6 --- e3
    t7 --- e2

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Конечно на практике такой текст представить сложно, но такое запросто может случиться.&lt;br /&gt;
Продолжаем. При чем здесь поток (в заголовке)? Добавим направление в наш граф, 2 ноды &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Target&lt;/code&gt; и представим, что из &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source&lt;/code&gt; в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Target&lt;/code&gt;, через вершины типа &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;, течет поток (молочные реки к кисельным берегам сильного ИИ). Ограничим количество потока, вытекающего из &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source&lt;/code&gt; количеством вершин типа &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;. В скобках на графе указано количество вытекающего потока из ноды:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph
    Source[&quot;Source (4)&quot;] --&amp;gt; e1
    Source --&amp;gt; e2
    e1[&quot;e1 (2)&quot;] --&amp;gt; t1
    e2[&quot;e1 (1)&quot;] --&amp;gt; t1
    e1 --&amp;gt; t4
    t1[&quot;t1 (1)&quot;] --&amp;gt; Target
    t2[&quot;t2 (1)&quot;] --&amp;gt; Target
    t3[&quot;t3 (1)&quot;] --&amp;gt; Target
    t4[&quot;t4 (1)&quot;] --&amp;gt; Target

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Выбирая между &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e1&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e2&lt;/code&gt; берем ту вершину, через которую из &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source&lt;/code&gt; в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Target&lt;/code&gt; может протечь максимальное количество потока.&lt;br /&gt;
Конечно не так всё просто, детали я опишу в другой статье. Важно что этот подход позволяет добавить к выбору нод типа &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E&lt;/code&gt; еще и информацию о семантических отношениях сущностей, но это совсем другая история.&lt;/p&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="АрхиГраф.Логос" /><category term="RDF" /><category term="NLU" /><category term="NER" /><category term="велосипед" /><summary type="html">Решая задачу распознавания именованных сущностей (NER) столкнулся с такой штукой - для morphologically rich (синтетических) языков свойственен почти случайный порядок слов в предложении. При этом задачу NER решают обычно на датасетах с разметкой IOB (Begin, Inner, Out), учитывающую последовательность токенов. Например в тексте “Нижний Новгород, мать его.” будут такие теги - B-LOC, I-LOC, O, O ( Начало Location, продолжение Location и 2 слова без меток). Но мы, носители великого и могучего, можем запросто сказать так: “Нижний, мать его, Новгород” и модель, обученная на таком датасете, выдаст B-LOC, O, O, B-LOC. Чтобы собрать Сущность НижнийНовгород, нужно придумать еще один слой, который соберет эти 2 “начала” в одну “цепочку”. Как-то так это можно представить графически:</summary></entry><entry><title type="html">Альтернатива Punto Switcher - расширение для PopClip.</title><link href="https://cnstntn-kndrtv.github.io/posts/cyr-lat-switcher/" rel="alternate" type="text/html" title="Альтернатива Punto Switcher - расширение для PopClip." /><published>2021-09-08T09:37:00+03:00</published><updated>2021-09-15T10:56:30+03:00</updated><id>https://cnstntn-kndrtv.github.io/posts/cyr-lat-switcher</id><content type="html" xml:base="https://cnstntn-kndrtv.github.io/posts/cyr-lat-switcher/">&lt;p&gt;&lt;a href=&quot;https://yandex.ru/soft/punto/&quot;&gt;PuntoSwitcher&lt;/a&gt; - древняя утилита от Яндекс, позволяющая менять hfcrkflre (раскладку) клавиатуры, если вы вдруги забыли это сделать.&lt;br /&gt;
При этом она записывает какую-то часть набираемого вами текста и меняет его. Что, конечно, очень подозрительно с точки зрения безопасности и вызывает много споров. &lt;br /&gt;
Давно (с 2010, примерно, года) открыл для себя утилиту &lt;a href=&quot;https://pilotmoon.com/popclip/&quot;&gt;PopClip&lt;/a&gt; - удобно, легко и всё такое. 
И на тот момент дико удобной казалась такая же всплывающая фиговина в iOS.&lt;br /&gt;
На днях, в очередной раз стирая recjr ntrcnf (кусок текста) пришла идея объединить эти 2 утилиты, в итоге родилось расширение для PopClip.&lt;br /&gt;
&lt;a href=&quot;https://github.com/pilotmoon/PopClip-Extensions/tree/master/source/CyrLatSwitcher&quot;&gt;Тут&lt;/a&gt; лежит исходник.&lt;br /&gt;
Мой код в репозиторий приняли, надеюсь однажды выложат в &lt;a href=&quot;https://pilotmoon.com/popclip/extensions/&quot;&gt;официальный список&lt;/a&gt;, а пока нужно это всё качать и собирать из исходника по &lt;a href=&quot;https://github.com/pilotmoon/PopClip-Extensions#useful-links&quot;&gt;инструкциям&lt;/a&gt;.&lt;/p&gt;</content><author><name>Constantin Kondratyev</name></author><category term="Projects" /><category term="Utils" /><category term="soft" /><category term="utils" /><summary type="html">PuntoSwitcher - древняя утилита от Яндекс, позволяющая менять hfcrkflre (раскладку) клавиатуры, если вы вдруги забыли это сделать. При этом она записывает какую-то часть набираемого вами текста и меняет его. Что, конечно, очень подозрительно с точки зрения безопасности и вызывает много споров. Давно (с 2010, примерно, года) открыл для себя утилиту PopClip - удобно, легко и всё такое. И на тот момент дико удобной казалась такая же всплывающая фиговина в iOS. На днях, в очередной раз стирая recjr ntrcnf (кусок текста) пришла идея объединить эти 2 утилиты, в итоге родилось расширение для PopClip. Тут лежит исходник. Мой код в репозиторий приняли, надеюсь однажды выложат в официальный список, а пока нужно это всё качать и собирать из исходника по инструкциям.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cnstntn-kndrtv.github.io/%7B%22src%22=%3E%22/assets/img/posts/hello_world.jpg%22,%20%22width%22=%3E1000,%20%22height%22=%3E400,%20%22alt%22=%3E%22hello%20%D1%86%D1%89%D0%BA%D0%B4%D0%B0%22%7D" /><media:content medium="image" url="https://cnstntn-kndrtv.github.io/%7B%22src%22=%3E%22/assets/img/posts/hello_world.jpg%22,%20%22width%22=%3E1000,%20%22height%22=%3E400,%20%22alt%22=%3E%22hello%20%D1%86%D1%89%D0%BA%D0%B4%D0%B0%22%7D" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>